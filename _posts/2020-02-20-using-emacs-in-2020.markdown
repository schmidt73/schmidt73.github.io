---
layout: post
title: 5 Reasons To Use emacs in 2020
date: 2020-04-20 14:20
comments: true
categories: [Computer Science]
preview: "/assets/post_previews/emacs.png"
---
> With the development of modern IDEs and their seemingly all
> encompassing programming toolboxes, editors like emacs [^1] seem to be a
> thing of the past. The irony is that emacs had most of the IDE features 
> first and today still pushes the boundary of modern text-editing. 

## Vim integration

{% include image.html 
   url="/assets/post_contents/emacs_2020/evil_emacs.gif" 
   description="An example of using evil (vim) in emacs." %}

For those who haven't used vim, try it. It will be difficult at first,
but once you get the hang of it, you won't want to look back. I
believe that vim integration is essential in any editor I use. Point
and click text editing feels slow, tedious, error prone, and
non-extensible. Emacs integrates vim through a plugin called evil [^2], an
"extensible vi layer for emacs." It was the first plugin I installed
when learning emacs and it made text editing feel immediately at
home. Insert mode, normal mode, visual mode, and command mode are all
included. You can stick to :w with no problems.

## M-x new-blog-post and metaprogramming

I like illustrative examples. Here, I illustrate the power of emacs to
generate code and automate repetitive tasks. I wrote a simple emacs
function called `(new-blog-post NAME)` that generates a new blogpost
with a given name automatically.  Here is a demo of it in use,

{% include image.html
   url="/assets/post_contents/emacs_2020/new-blog-post.gif" 
   description="An example of using a custom emacs command to
   autogenerate blogposts" %}

And here is the very simple elisp code I wrote for the command,

```elisp
(defun new-blog-post (name)
  (interactive "MPost name: ")
  (let* ((posts-dir "/home/schmidt73/Desktop/blog/_posts/")
         (post-file (concat posts-dir (format-time-string "%Y-%m-%d") "-" name ".markdown")))
    (find-file post-file)
    (insert "new-blog-post")
    (evil-append-line 1)))
```

If you don't know LISP don't worry, the code is relatively
straightforward. It autogenerates a file with the current date prefix
(dynamically generated) and `.markdown` suffix. Then, emacs jumps me
into insert mode within the file and after hitting tab, expands the
`new-blog-post` template that I created, asking me to fill out various
forms.

Let me make a few remarks on elisp more generally. After defining a
function in elisp, I can easily call the function from anywhere within
emacs, either interactively (like in the GIF) or from another piece of
code. If I wanted to automatically generate 10 blog posts, it would be
as simple as calling this function in a loop. Second, notice that the
configuration language is a complete programming language. Unlike
vim's vimscript, you can write real programs in elisp which is why
emacs has a great collection of libraries, plugins, and tooling
surrounding it.

As I don't create new blog posts very often, I admit that time has
probably been wasted automating the task. However, it serves as an example
emphasizing the power of emacs metaprogramming capabilites. If I have
some specific functionality I need, I can write a short function to do
it, and it seamlessly integrates into my text editor. 

## SSH 

{% include image.html
   url="/assets/post_contents/emacs_2020/tramp.gif" 
   description="An example of SSHing into a remote server and
   modifying files." %}

A text file in a remote location is no different than a file stored
locally, so why is it treated as such? Emacs breaks this distinction
through a mode called tramp and allows you to easily access remote
files as if they were local, giving you the entire power of local
editing on a remote host including syntax highlighting,
autocompletion, file navigation - everything.

## File Navigation and Management

{% include image.html
   url="/assets/post_contents/emacs_2020/filenav.gif" 
   description="An example of opening up my blog code and jumping through files." %}

I spend a lot of time navigating and managing files. Renaming,
editing, copying, and deleting files are all part of my workflow. Most
editors don't attempt to help. They make the reasonable assumption
that you use your OS's file manager and load the files into your
editor for editing. Of course, you can do this with emacs, but it also
offers helpful functionality for working with your filesystem.

You can save locations within files or directories as
bookmarks for easy access. There is a emacs mode called Dired which
serves as a file manager. Fuzzy file navigation is supported through
the plugins helm, ivy, and ido. Emacs does it all.

## Magit

{% include image.html 
    url="/assets/post_contents/emacs_2020/magit.gif"
   description="An example using magit to stage files and look at
   commits." %}

If you search the web for reasons to use emacs, Magit [^3] will pop
up. It is a complete interface to git inside of emacs. I won't waste
my breath advocating for it. It's impressive. Check it out.

## Conclusion

I've just listed a few of the reasons for why you should check out
emacs. I haven't even mentioned what it's like to program in emacs or
use orgmode for organization. For me though, it's more than the
features. Emacs makes me feel powerful and in control, as if I'm in
the brains of the computer. It makes programming a joy and who could
ask for more than that.

[^1]: emacs: <https://www.gnu.org/software/emacs/>
[^2]: evil (vim): <https://github.com/emacs-evil/evil >
[^3]: Magit: <https://magit.vc/>
